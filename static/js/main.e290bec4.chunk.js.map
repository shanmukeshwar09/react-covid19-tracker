{"version":3,"sources":["Components/App.jsx","Components/Body/Body.jsx","Components/Body/BodyHeader.jsx","Components/Body/BodyCards.jsx","Components/Body/BodyFooter.jsx","Components/Sidebar/Sidebar.jsx","Components/Sidebar/SidebarHeader.jsx","Components/Sidebar/SidebarBody.jsx","Redux/covid19.js","Redux/API.js","Components/Utils.jsx","index.js"],"names":["App","dispatch","useDispatch","useEffect","a","updateGlobal","fetchGlobal","updateCountries","fetchCountries","func","className","Body","BodyHeader","Card","title","total","newCases","CommaNumber","class","BodyCards","global","useSelector","state","cases","todayCases","recovered","todayRecovered","deaths","todayDeaths","active","critical","BodyFooter","countries","selectedCoords","MapContainer","attributionControl","center","lat","long","zoom","scrollWheelZoom","TileLayer","url","showDataOnMap","Sidebar","SidebarHeader","ref","useRef","type","placeholder","onChange","updateSearchKey","current","value","SidebarBody","searchKey","map","country","index","length","stra","strb","toLowerCase","includes","Country","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Active","Critical","Tile","slice","createSlice","name","initialState","reducers","payload","updateSelectedCoords","data","actions","Axios","get","casesTypeColors","hex","rgb","half_op","multiplier","casesType","Circle","countryInfo","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","store","createStore","Reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e290bec4.chunk.js","sourcesContent":["import {\n  Sidebar,\n  Body,\n  useEffect,\n  useDispatch,\n  updateGlobal,\n  updateCountries,\n  fetchGlobal,\n  fetchCountries,\n} from \"Imports\";\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const func = async () => {\n      dispatch(updateGlobal(await fetchGlobal()));\n      dispatch(updateCountries(await fetchCountries()));\n    };\n    func();\n  }, []);\n  return (\n    <div className=\"app\">\n      <Body />\n      <Sidebar />\n    </div>\n  );\n};\n","import { BodyHeader, BodyCards, BodyFooter } from \"Imports\";\n\nexport const Body = () => {\n  return (\n    <div className=\"body\">\n      <BodyHeader />\n      <BodyCards />\n      <BodyFooter />\n    </div>\n  );\n};\n","export const BodyHeader = () => {\n  return <div className=\"body-header\">Covid-19 Global Stats</div>;\n};\n","import { useSelector, CommaNumber } from \"Imports\";\n\nconst Card = ({ title, total, newCases, className }) => (\n  <div className=\"card\">\n    <h2>{title}</h2>\n    <div>\n      <h3 className={className}>{CommaNumber(total)}</h3>\n      {newCases && (\n        <div className=\"bottom\">\n          <h4>{CommaNumber(newCases)}</h4>\n          <i class=\"arrow gg-arrow-long-up\" />\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nexport const BodyCards = () => {\n  const global = useSelector((state) => state.global);\n\n  return (\n    <div className=\"body-cards\">\n      <Card\n        className=\"confirmed\"\n        title=\"Infected\"\n        total={global.cases}\n        newCases={global.todayCases}\n      />\n      <Card\n        className=\"recovered\"\n        title=\"Recovered\"\n        total={global.recovered}\n        newCases={global.todayRecovered}\n      />\n      <Card\n        className=\"deaths\"\n        title=\"Deaths\"\n        total={global.deaths}\n        newCases={global.todayDeaths}\n      />\n      <Card className=\"active\" title=\"Active\" total={global.active} />\n      <Card className=\"critical\" title=\"Critical\" total={global.critical} />\n    </div>\n  );\n};\n","import { useSelector, MapContainer, TileLayer, showDataOnMap } from \"Imports\";\n\nconst leafURL =\n  \"https://api.mapbox.com/styles/v1/nicknyr/cje7mtk2y6gf92snsydobiahf/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoibmlja255ciIsImEiOiJjajduNGptZWQxZml2MndvNjk4eGtwbDRkIn0.L0aWwfHlFJVGa-WOj7EHaA\";\n\nexport const BodyFooter = () => {\n  const { countries, selectedCoords } = useSelector((state) => state);\n  return (\n    <MapContainer\n      attributionControl={false}\n      className=\"map-container\"\n      center={[selectedCoords.lat, selectedCoords.long]}\n      zoom={3}\n      scrollWheelZoom={false}\n    >\n      <TileLayer url={leafURL} />\n      {showDataOnMap(countries, \"cases\")}\n    </MapContainer>\n  );\n};\n","import { SidebarHeader, SidebarBody } from \"Imports\";\n\nexport const Sidebar = () => {\n  return (\n    <div className=\"sidebar\">\n      <SidebarHeader />\n      <SidebarBody />\n    </div>\n  );\n};\n","import { useRef, useDispatch, updateSearchKey } from \"Imports\";\n\nexport const SidebarHeader = () => {\n  const dispatch = useDispatch();\n  const ref = useRef(\"\");\n\n  const handleInput = () => {\n    dispatch(updateSearchKey(ref.current.value));\n  };\n\n  return (\n    <div>\n      <div className=\"sidebar-header\">\n        <h1>Cases Info</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Search here\"\n          ref={ref}\n          onChange={handleInput}\n        />\n      </div>\n      <div className=\"sidebar-body-header\">\n        <h2>Country</h2>\n        <h3>Infected</h3>\n        <h3>Recovered</h3>\n        <h3>Deaths</h3>\n        <h3>Active</h3>\n        <h3>Critical</h3>\n      </div>\n    </div>\n  );\n};\n","import { useSelector, CommaNumber } from \"Imports\";\n\nconst match = (stra, strb) => {\n  return stra.toLowerCase().includes(strb.toLowerCase());\n};\n\nexport const SidebarBody = () => {\n  const { searchKey, countries } = useSelector((state) => state);\n  return (\n    <div className=\"sidebar-body\">\n      {countries.map((country, index) => {\n        return !searchKey.length ? (\n          <Tile\n            key={index}\n            Country={country.country}\n            NewConfirmed={country.todayCases}\n            TotalConfirmed={country.cases}\n            NewDeaths={country.todayDeaths}\n            TotalDeaths={country.deaths}\n            NewRecovered={country.todayRecovered}\n            TotalRecovered={country.recovered}\n            Active={country.active}\n            Critical={country.critical}\n          />\n        ) : (\n          match(country.country, searchKey) && (\n            <Tile\n              key={index}\n              Country={country.country}\n              NewConfirmed={country.todayCases}\n              TotalConfirmed={country.cases}\n              NewDeaths={country.todayDeaths}\n              TotalDeaths={country.deaths}\n              NewRecovered={country.todayRecovered}\n              TotalRecovered={country.recovered}\n              Active={country.active}\n              Critical={country.critical}\n            />\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nconst Tile = ({\n  Country,\n  NewConfirmed,\n  TotalConfirmed,\n  NewDeaths,\n  TotalDeaths,\n  NewRecovered,\n  TotalRecovered,\n  Active,\n  Critical,\n}) => (\n  <div className=\"sidebar-body-country\">\n    <h3>{Country}</h3>\n    <div>\n      <h4 className=\"confirmed\">{CommaNumber(TotalConfirmed)}</h4>\n      <div className=\"bottom\">\n        <h5>{CommaNumber(NewConfirmed)}</h5>\n        <i class=\"arrow gg-arrow-long-up\" />\n      </div>\n    </div>\n    <div>\n      <h4 className=\"recovered\">{CommaNumber(TotalRecovered)}</h4>\n      <div className=\"bottom\">\n        <h5>{CommaNumber(NewRecovered)}</h5>\n        <i class=\"arrow gg-arrow-long-up\" />\n      </div>\n    </div>\n    <div>\n      <h4 className=\"deaths\">{CommaNumber(TotalDeaths)}</h4>\n      <div className=\"bottom\">\n        <h5>{CommaNumber(NewDeaths)}</h5>\n        <i class=\"arrow gg-arrow-long-up\" />\n      </div>\n    </div>\n    <div>\n      <h4 className=\"active\">{CommaNumber(Active)}</h4>\n    </div>\n    <div>\n      <h4 className=\"critical\">{CommaNumber(Critical)}</h4>\n    </div>\n  </div>\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  searchKey: \"\",\n  selectedCoords: { lat: 20, long: 77 },\n  countries: [],\n  global: {},\n};\n\nconst slice = createSlice({\n  name: \"covid19\",\n  initialState: initialState,\n  reducers: {\n    updateSearchKey: (state, payload) => {\n      state.searchKey = payload.payload;\n    },\n    updateSelectedCoords: (state, payload) => {\n      const { lat, long } = payload.payload;\n      state.selectedCoords = { lat, long };\n    },\n    updateGlobal: (state, payload) => {\n      state.global = payload.payload.data;\n    },\n    updateCountries: (state, payload) => {\n      state.countries = payload.payload.data;\n    },\n  },\n});\n\nexport const {\n  updateSearchKey,\n  updateSelectedCoords,\n  updateGlobal,\n  updateCountries,\n} = slice.actions;\nexport default slice.reducer;\n","import Axios from \"axios\";\n\nconst GLOBAL_URL = \"https://disease.sh/v3/covid-19/all\";\nconst COUNTRIES_URL = \"https://disease.sh/v3/covid-19/countries\";\n\nexport const fetchGlobal = async () => await Axios.get(GLOBAL_URL);\nexport const fetchCountries = async () => await Axios.get(COUNTRIES_URL);\n","import { Circle, Popup, CommaNumber } from \"Imports\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 400,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 800,\n  },\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${CommaNumber(stat)}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country, index) => (\n    <Circle\n      key={index}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-flag\"></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {CommaNumber(country.cases)}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {CommaNumber(country.recovered)}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {CommaNumber(country.deaths)}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import { ReactDOM, App, Provider, createStore, Reducer } from \"Imports\";\n\nconst store = createStore(Reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}